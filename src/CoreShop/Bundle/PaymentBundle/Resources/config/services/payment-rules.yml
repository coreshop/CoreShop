services:
    _defaults:
        public: true

    coreshop.registry.payment_rule.conditions:
        class: CoreShop\Component\Registry\ServiceRegistry
        arguments:
            - CoreShop\Component\Rule\Condition\ConditionCheckerInterface
            - payment-rule-condition
        tags:
            - { name: coreshop.registry, type_hint: paymentRuleConditions }

    coreshop.form_registry.payment_rule.conditions:
        class: CoreShop\Bundle\ResourceBundle\Form\Registry\FormTypeRegistry


    coreshop.registry.payment_rule.actions:
        class: CoreShop\Component\Registry\ServiceRegistry
        arguments:
            - CoreShop\Component\Payment\Rule\Action\ProviderActionProcessorInterface
            - payment-rule-action
        tags:
            - { name: coreshop.registry, type_hint: paymentRuleActions }

    coreshop.form_registry.payment_rule.actions:
        class: CoreShop\Bundle\ResourceBundle\Form\Registry\FormTypeRegistry

    # payment Rule Processor
    coreshop.payment_rule.conditions.processor:
        class: CoreShop\Component\Rule\Condition\RuleConditionsValidationProcessor
        shared: false
        arguments:
            - '@coreshop.registry.payment_rule.conditions'
            - 'payment Rules'
        tags:
            - { name: coreshop.rule.conditions.validation_processor }

    coreshop.payment_rule.processor:
        class: CoreShop\Component\Rule\Condition\RuleValidationProcessor
        shared: false
        arguments:
            - '@coreshop.payment_rule.conditions.processor'

    # payment CONDITIONS
    CoreShop\Component\Payment\Rule\Condition\AmountConditionChecker:
        tags:
            - { name: coreshop.payment_rule.condition, type: amount, form-type: CoreShop\Bundle\PaymentBundle\Form\Type\Rule\Condition\AmountConfigurationType }


    coreshop.payment_rule.condition.nested:
        class: CoreShop\Component\Rule\Condition\NestedConditionChecker
        arguments:
            - '@coreshop.payment_rule.conditions.processor'
        tags:
            - { name: coreshop.payment_rule.condition, type: nested, form-type: CoreShop\Bundle\PaymentBundle\Form\Type\Rule\Condition\NestedConfigurationType }

    # payment Rule ACTIONS
    CoreShop\Component\Payment\Rule\Action\AdditionPercentActionProcessor:
        tags:
            - { name: coreshop.payment_rule.action, type: additionPercent, form-type: CoreShop\Bundle\PaymentBundle\Form\Type\Rule\Action\AdditionPercentActionConfigurationType }

    CoreShop\Component\Payment\Rule\Action\DiscountPercentActionProcessor:
        tags:
            - { name: coreshop.payment_rule.action, type: discountPercent, form-type: CoreShop\Bundle\PaymentBundle\Form\Type\Rule\Action\DiscountPercentActionConfigurationType }

    CoreShop\Component\Payment\Rule\Action\PaymentRuleActionProcessor:
        arguments:
            - '@CoreShop\Component\Payment\Rule\Processor\PaymentRuleActionProcessorInterface'
            - '@coreshop.repository.payment_rule'
        tags:
            - { name: coreshop.payment_rule.action, type: paymentRule, form-type: CoreShop\Bundle\PaymentBundle\Form\Type\Rule\Common\PaymentRuleConfigurationType }

    CoreShop\Component\Payment\Rule\Processor\PaymentRuleActionProcessorInterface: '@CoreShop\Component\Payment\Processor\PaymentRuleActionProcessor'
    CoreShop\Component\Payment\Processor\PaymentRuleActionProcessor:
        shared: false
        arguments:
            - '@coreshop.registry.payment_rule.actions'

    # Validators
    CoreShop\Component\Payment\Validator\PaymentRuleValidator:
        arguments:
            - '@CoreShop\Component\Payment\Checker\PaymentRuleChecker'
        tags:
            - { name: coreshop.payment.validator, priority: 10 }

    CoreShop\Component\Payment\Checker\PaymentRuleCheckerInterface: '@CoreShop\Component\Payment\Checker\PaymentRuleChecker'
    CoreShop\Component\Payment\Checker\PaymentRuleChecker:
        arguments:
            - '@coreshop.payment_rule.processor'


    CoreShop\Component\Payment\Resolver\PaymentProviderResolverInterface: '@CoreShop\Component\Payment\Resolver\PaymentProviderResolver'
    CoreShop\Component\Payment\Resolver\PaymentProviderResolver:
        decoration_priority: 800
        decorates: CoreShop\Component\Payment\Resolver\PaymentProviderResolverInterface
        arguments:
            - '@coreshop.repository.payment_provider'


    CoreShop\Component\Payment\Resolver\RuleBasedPaymentProviderResolver:
        decoration_priority: 1
        decorates: CoreShop\Component\Payment\Resolver\PaymentProviderResolverInterface
        arguments:
            - '@coreshop.repository.payment_provider'
            - '@CoreShop\Component\Payment\Validator\PaymentRuleValidatorInterface'

    CoreShop\Component\Payment\Validator\PaymentProviderValidatorInterface: '@CoreShop\Component\Payment\Validator\PaymentProviderValidator'
    CoreShop\Component\Payment\Validator\PaymentProviderValidator:
        arguments:
            - '@CoreShop\Component\Payment\Resolver\PaymentProviderResolverInterface'


    CoreShop\Component\Payment\Validator\PaymentRuleValidatorInterface: '@CoreShop\Component\Payment\Validator\PaymentRuleValidator'

#    CoreShop\Component\Payment\Rule\Condition\PaymentRuleConditionChecker:
#        arguments:
#            - '@coreshop.payment_rule.processor'
#            - '@coreshop.repository.payment_rule'
#        tags:
#            - { name: coreshop.payment_rule.condition, type: paymentRule, form-type: CoreShop\Bundle\PaymentBundle\Form\Type\Rule\Common\PaymentRuleConfigurationType }

    # Rule Assessor
    coreshop.rule.availability_assessor.payment_rule:
        class: CoreShop\Bundle\RuleBundle\Assessor\RuleAvailabilityAssessor
        arguments:
            - '@coreshop.repository.payment_rule'
        tags:
            - { name: coreshop.registry.rule_availability_assessor, type: payment_rule }